#!/usr/bin/env python3

import re
import sys
import argparse
from logging import Logger, basicConfig, getLogger
from os import getenv, environ, pathsep, fspath
from pathlib import Path, PurePath
from typing import List, Set, Optional
from subprocess import call, Popen, PIPE, run, STDOUT
import pyperclip

OTERA_LIBRARY = 'otera-cp-library'
ATCODER_LIBRARY = 'ac-library'

RED = '\033[91m'
BLUE = '\033[94m'
GREEN = '\033[92m'
END = '\033[0m'

# 現在のPATHからotera-cp-libraryを探すような実装
class Lib_Serach:
    def __init__(self):
        pass

    def find_otera(self):
        self.cur_path = Path.cwd()
        self.count = 0
        while self.count < 20:
            otera_library_path = self.cur_path / OTERA_LIBRARY
            if otera_library_path.exists():
                print("[INFO] find path of otera-cp-library as ", str(otera_library_path))
                return str(otera_library_path)
            self.count += 1
            self.cur_path = self.cur_path.parent

        print(RED + "[INFO] can not find otera-cp-library" + END)
        return "can_not_find"

if __name__ == "__main__":
    basicConfig(
        format="%(asctime)s [%(levelname)s] %(message)s",
        datefmt="%H:%M:%S",
        level=getenv('LOG_LEVEL', 'INFO'),
    )
    parser = argparse.ArgumentParser(description='Run')
    parser.add_argument('source', help='Source File')
    # parser.add_argument('-c', '--console',
    #                     action='store_true', help='Print to Console')
    parser.add_argument('-ac', '--atcoder', action='store_true', help='At atcoder')
    parser.add_argument('-cf', '--codeforces', action='store_true', help='At codeforces')
    parser.add_argument('-yk', '--yukicoder', action='store_true', help='At yukicoder')
    parser.add_argument('-oj', '--online_judge', action='store_true', help='command oj')
    parser.add_argument('--d', help='a directory name for oj test cases')
    parser.add_argument('-g++', '--compile', action='store_true', help='compile')
    parser.add_argument('--o', help='g++ output execute file')
    parser.add_argument('-exe', '--execute', action='store_true', help='execute')
    parser.add_argument('-noi', '--noinput',action='store_true', help='nothing input')
    parser.add_argument('--i', help='execute input file')
    parser.add_argument('--output', help='execute output file')
    parser.add_argument('-deb', '--debug', action='store_true', help='debug')
    parser.add_argument('-sani', '--sanitaizer', action='store_true', help='sanitize')
    parser.add_argument('-e', '--expand', action='store_true', help='expand')
    parser.add_argument('-cfa', '--codeforces_all', action='store_true', help='-cf -g++ -oj')
    parser.add_argument('-aca', '--atcoder_all', action='store_true', help='-ac -g++ -oj --d ./tests/')
    parser.add_argument('--cfdeb', help='-cf -g++ -deb -exe --i ./test/sample-num.in')
    parser.add_argument('--acdeb', help='-ac -g++ -deb -exe --i ./tests/sample-num.in')
    parser.add_argument('--lib', help='otera-cp-library path')
    parser.add_argument('-nocopy', '--no_copy', action='store_true', help='no copy code')
    parser.add_argument('-f', '--force', action='store_true', help='Force')
    parser.add_argument('-m', '--message', action='store_true', help='display message')
    parser.add_argument('-c', '--copy', action='store_true', help='copy source')
    parser.add_argument('-modify', '--modify', action='store_true', help='modify source')
    
    parser.add_argument('-gm', '--gppm', action='store_true', help='-g++ -m')
    parser.add_argument('-ge', '--gppexe', action='store_true', help='-g++ -exe')
    parser.add_argument('-ged', '--gppexedeb', action='store_true', help='-g++ -exe -deb')
    parser.add_argument('-gei', '--gppexei', action='store_true', help='-g++ -exe --i num')
    
    parser.add_argument('-get', '--get_lib_path', action='store_true', help='Get Library Path')
    opts = parser.parse_args()
    
    otera_lib_path = "can_not_find"
    
    if opts.lib:
        otera_lib_path = opts.lib
    else:
        lib_serach = Lib_Serach()
        otera_lib_path = lib_serach.find_otera()
        atcoder_lib_path = otera_lib_path + '/' + ATCODER_LIBRARY
        
    if opts.get_lib_path:
        print("-I", otera_lib_path, "-I", atcoder_lib_path)
        exit(0)

    if opts.codeforces_all:
        opts.codeforces = "codeforces"
        opts.compile = "compile"
        opts.online_judge = "oj"
        opts.expand = "expand"
        opts.copy = "copy"

    if opts.atcoder_all:
        opts.atcoder = "atcoder"
        opts.compile = "compile"
        opts.online_judge = "oj"
        opts.d = "./tests/"
        opts.expand = "expand"
        opts.copy = "copy"

    if opts.cfdeb:
        opts.codeforces = "codeforces"
        opts.compile = "compile"
        opts.debug = "debug"
        opts.execute = "execute"
        opts.i = "./test/sample-" + opts.cfdeb + ".in"
        # opts.expand = "expand"

    if opts.acdeb:
        opts.atcoder = "atcoder"
        opts.compile = "compile"
        opts.debug = "debug"
        opts.execute = "execute"
        opts.i = "./tests/sample-" + opts.acdeb + ".in"
        # opts.expand = "expand"
        
    if opts.gppm:
        opts.compile = "compile"
        opts.message = "message"
        
    if opts.gppexe:
        opts.compile = "compile"
        opts.execute = "execute"
        
    if opts.gppexedeb:
        opts.compile = "compile"
        opts.execute = "execute"
        opts.debug = "debug"
        
    if opts.gppexei:
        opts.compile = "compile"
        opts.execute = "execute"
        opts.i = opts.gppexei

    if opts.compile:
        print("[INFO] start: compile")
        compile_command = ["g++", opts.source, "-std=gnu++17", "-O2"]
        if otera_lib_path != "can_not_find":
            compile_command.extend(["-I", otera_lib_path, "-I", atcoder_lib_path])
        
        if opts.debug:
            compile_command.append("-DDEBUG")
        if opts.o:
            compile_command.extend(["-o", opts.o])
        # call(compile_command)
        if opts.sanitaizer:
            modify_command = ["python3", otera_lib_path + "/modify.py", "--lib", otera_lib_path, opts.source]
            call(modify_command)
            compile_command = ["/usr/bin/g++", "modify.cpp", "-std=c++17", "-g", "-Wall", "-Wextra", "-fsanitize=address", "-fsanitize=undefined", "-O2"]
        
        proc = run(compile_command, stderr=PIPE, text=True)
        res_str = proc.stderr
        idx = res_str.find("error")
        if idx != -1:
            print(RED + "[ERROR] compile error" + END)
            # if opts.message:
            print(res_str)
            if (not opts.force):
                print(RED + "[ERROR] compile error and cancel processing" + END)
                exit(0)
        else:
            print(BLUE + "[INFO] done: compile" + END)

    if opts.online_judge:
        if opts.d:
            oj_command = ["oj", "t", "-d", opts.d]
            call(oj_command)
        else:
            oj_command = ["oj", "t"]
            call(oj_command)

    if opts.execute:
        command = []
        if opts.o:
            command.append("./" + opts.o)
        else:
            command.append("./a.out")
        if opts.i:
            # input = open(opts.input).read()
            # print(input)
            # proc = Popen(command, stdin=open(opts.input), stdout=PIPE)
            if opts.output:
                run(command, stdin=open(opts.i), stdout=open(opts.output, "w"), text=True)
            else:
                proc = run(command, stdin=open(opts.i), stdout=PIPE, stderr=STDOUT, text=True)
                print(proc.stdout)
                if proc.returncode != 0:
                    print(RED + "[ERROR]: Run-time Error" + END)
                    exit(0)
        else:
            if opts.output:
                if opts.noinput:
                    print("[WARNIG] : Check whether your code does not need input, carefully")
                    run(command, input="", stdout=open(opts.output, "w"), text=True)
                else:
                    print("[WARNIG] : Write input by 1 line.\n")
                    text = input()
                    run(command, input=text, stdout=open(opts.output, "w"), text=True)
            else:
                # call(command)
                proc = run(command, stdout=PIPE, stderr=PIPE, text=True)
                print(proc.stdout)
                if proc.returncode != 0:
                    print(RED + "[ERROR]: Run-time Error" + END)
                    exit(0)

    if opts.expand:
        if otera_lib_path != "can_not_find":
            expand_command = ["python3", otera_lib_path + "/expander.py", "--lib", otera_lib_path, opts.source]
            if not(opts.atcoder or opts.yukicoder):
                expand_command.append("-ac")
            call(expand_command)

    # ファイルのコピー機能を追加
    target_file = opts.source
    
    if otera_lib_path != "can_not_find" and opts.expand:
        target_file = "combined.cpp"
    
    if opts.atcoder and otera_lib_path != "can_not_find" and opts.expand:
        target_file = "combined_otera.cpp"
    elif opts.codeforces and otera_lib_path != "can_not_find" and opts.expand:
        target_file = "combined.cpp"
    elif opts.yukicoder and otera_lib_path != "can_not_find" and opts.expand:
        target_file = "combined_otera.cpp"
    # elif otera_lib_path != "can_not_find":
    #     target_file = "combined_otera.cpp"

    if opts.atcoder and opts.expand and opts.copy:
        submit_file = "atcoder_submit.cpp"
        submit_writer = open(submit_file, "w")
        target_reader = open(target_file).read()
        for line in target_reader.splitlines():
            count_apost = line.count('\'')
            submit_writer.write(line)
            submit_writer.write("\n")
            if count_apost % 2 == 1:
                new_line = "//\'\n"
                submit_writer.write(new_line)
        submit_writer.close()
        print(GREEN + "[INFO] generate atcoder_submit.cpp" + END)
        target_file = submit_file

    if opts.copy:
        target_str = open(target_file).read()
        pyperclip.copy(target_str)
        information_str = "(length:" + str(len(target_str)) + ")"
        print(GREEN + "[INFO] copy", target_file, information_str + END)
        
    if opts.modify and (not opts.sanitaizer):
        modify_command = ["python3", otera_lib_path + "/modify.py", "--lib", otera_lib_path, target_file]
        call(modify_command)
        
    if opts.modify or opts.sanitaizer:
        print(RED + "[WARN]: DO NOT EDIT modify.cpp" + END)
